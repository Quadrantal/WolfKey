"""
Django settings for student_forum project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from django.conf import settings
from django.conf.urls.static import static
import os
from dotenv import load_dotenv
import dj_database_url
import sys
import json
import base64
import ssl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'forum',
    'storages',
    'django_editorjs_fields',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'forum.middleware.UserRoleMiddleware',
    'corsheaders.middleware.CorsMiddleware'
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'student_forum.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Ensure this points to the correct directory
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'forum.context_processors.notifications',
                'forum.context_processors.latest_update',
                'forum.context_processors.user_background_slider',
                'forum.context_processors.user_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'student_forum.wsgi.application'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# filepath: /Users/a0014208/Documents/GitHub/School-Forum/school_forum/settings.py
if os.getenv('DATABASE_URL'):
    # Production database (Heroku)
    DATABASES = {
        'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
    }
else:
    # Local development database
    print("Local database")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'schoolforumdb'),
            'USER': os.getenv('DB_USER', 'superuser'),
            'PASSWORD': os.getenv('DB_PASSWORD', '1234'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
    
print(f"\nUsing database: {DATABASES['default']['NAME']}")
print(f"Database host: {DATABASES['default']['HOST']}")
print(f"Running from: {sys.argv[0]}")

# Cache configuration using Django's built-in Redis backend (Django 4.0+)
# https://docs.djangoproject.com/en/4.2/topics/cache/#redis
REDIS_URL = os.getenv('REDIS_URL')
if REDIS_URL:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "ssl_cert_reqs": None  # Disable SSL certificate validation for Heroku Redis
            } if REDIS_URL.startswith('rediss://') else {}
        }
    }
    print(f"Django cache configured with Redis: {REDIS_URL[:50]}...")
else:
    # Fallback to dummy cache for local development without Redis
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }
    print("Django cache configured with dummy backend (no Redis)")

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
        },
    },
}

CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8081',
    "http://localhost:8081",
    "exp://localhost:19000",
    "http://localhost:19006",
    'http://10.0.0.38:8000'
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^exp://.*",             # All Expo Go URLs
    r"^http://192\.168\..*"   # Local network IPs
]
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8081",
    "http://localhost:19000",
    "http://localhost:19006"
    , 'http://10.0.0.38:8000'
]

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'OPTIONS'
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cookie'
]



# Cookie settings
CORS_EXPOSE_HEADERS = ['set-cookie']
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False 
CSRF_COOKIE_HTTPONLY = False 
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = None

from dotenv import load_dotenv

load_dotenv()


try:
    decoded = base64.b64decode(os.getenv("GSHEET_CREDENTIALS_BASE64", "")).decode("utf-8")
    GSHEET_CREDENTIALS = json.loads(decoded)
except (json.JSONDecodeError, base64.binascii.Error) as e:
    print(f"Error loading GSHEET_CREDENTIALS: {e}")
    GSHEET_CREDENTIALS = {}
# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')
SITE_URL = os.getenv('SITE_URL')

AUTH_USER_MODEL = 'forum.User'

# Celery Configuration
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Reduce the number of simultaneous Redis connections to avoid hitting
# Heroku Redis connection limits. These values can be tuned via env vars.
# NOTE: Celery will load these under the 'CELERY_' namespace because the
# Celery app calls config_from_object(..., namespace='CELERY').
CELERY_BROKER_POOL_LIMIT = int(os.getenv('BROKER_POOL_LIMIT', '3'))
# This controls redis-py's max connections for Celery transport
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'max_connections': int(os.getenv('REDIS_MAX_CONNECTIONS', '10')),
    'socket_keepalive': True,
    'socket_keepalive_options': {},
    'socket_connect_timeout': 30,
    'socket_timeout': 30,
    'retry_on_timeout': True,
}

# Configure SSL for Redis broker when using TLS (rediss://)
# For Heroku Redis, use SSL encryption but disable certificate verification
try:
    if CELERY_BROKER_URL and CELERY_BROKER_URL.startswith('rediss://'):
        # Remove ssl_cert_reqs parameter from URL if present (it conflicts with our SSL config)
        import urllib.parse
        parsed_url = urllib.parse.urlparse(CELERY_BROKER_URL)
        query_params = urllib.parse.parse_qs(parsed_url.query)
        
        # Remove ssl_cert_reqs from query parameters
        if 'ssl_cert_reqs' in query_params:
            del query_params['ssl_cert_reqs']
            
        # Reconstruct URL without ssl_cert_reqs parameter
        new_query = urllib.parse.urlencode(query_params, doseq=True)
        cleaned_url = urllib.parse.urlunparse((
            parsed_url.scheme,
            parsed_url.netloc,
            parsed_url.path,
            parsed_url.params,
            new_query,
            parsed_url.fragment
        ))
        CELERY_BROKER_URL = cleaned_url
        CELERY_RESULT_BACKEND = cleaned_url
        
        # Use environment variable to control SSL validation
        # Set REDIS_SSL_CERT_REQS=required for strict validation (production with proper certs)  
        # Set REDIS_SSL_CERT_REQS=heroku for Heroku Redis (default - encrypted but no cert validation)
        ssl_cert_reqs = os.getenv('REDIS_SSL_CERT_REQS', 'heroku').lower()
        
        if ssl_cert_reqs == 'required':
            # Strict SSL validation (for production with proper CA-signed certificates)
            CELERY_BROKER_USE_SSL = {
                'ssl_cert_reqs': ssl.CERT_REQUIRED,
                'ssl_ca_certs': None,  # Use system CA bundle
                'ssl_check_hostname': False,
            }
        elif ssl_cert_reqs == 'optional':
            # Relaxed SSL validation (verify certs if present, but don't require)
            CELERY_BROKER_USE_SSL = {
                'ssl_cert_reqs': ssl.CERT_OPTIONAL,
                'ssl_ca_certs': None,
                'ssl_check_hostname': False,
            }
        else:
            # Heroku Redis configuration (default)
            # Uses SSL encryption but disables certificate verification for self-signed certs
            # This maintains encryption while working with Heroku's self-signed certificates
            CELERY_BROKER_USE_SSL = {
                'ssl_cert_reqs': ssl.CERT_NONE,
                'ssl_check_hostname': False,
                'ssl_ca_certs': None,
            }
        
        # Also set the result backend SSL configuration
        CELERY_REDIS_BACKEND_USE_SSL = CELERY_BROKER_USE_SSL.copy()
        
        # For debugging: disable result backend SSL temporarily if connections are problematic
        if os.getenv('CELERY_DISABLE_RESULT_BACKEND', 'false').lower() == 'true':
            CELERY_RESULT_BACKEND = None
            print("Result backend disabled for debugging")
        
        print(f"Cleaned Redis URL (removed ssl_cert_reqs parameter): {cleaned_url[:50]}...")
        print(f"Using SSL cert validation mode: {ssl_cert_reqs}")
            
except Exception as e:
    print(f"Error configuring Redis SSL: {e}")
    # If anything goes wrong reading the URL, do not set the override here.
    pass

# Improve connection reliability and timeouts
CELERY_BROKER_CONNECTION_TIMEOUT = int(os.getenv('BROKER_CONNECTION_TIMEOUT', '60'))  # Increased for stability
CELERY_BROKER_HEARTBEAT = int(os.getenv('BROKER_HEARTBEAT', '30'))  # Increased for stability

# Additional connection robustness settings
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 10

# Add retry settings for tasks
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_STORE_EAGER_RESULT = False

# Task execution robustness
CELERY_TASK_IGNORE_RESULT = False  # Store results for debugging
CELERY_TASK_TRACK_STARTED = True   # Track when tasks start
CELERY_SEND_TASK_EVENTS = True     # Enable task events
CELERY_TASK_SEND_SENT_EVENT = True # Send task sent events

# Connection pool settings for result backend
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
CELERY_RESULT_BACKEND_RETRY_ON_STARTUP = True

# Memory optimization for Heroku
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 10  # Restart worker after 10 tasks
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_WORKER_DISABLE_RATE_LIMITS = True
CELERY_RESULT_EXPIRES = 3600  # Results expire after 1 hour to save memory

# Add result backend connection configuration
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {
    'socket_keepalive': True,
    'socket_keepalive_options': {},
    'socket_connect_timeout': 30,
    'socket_timeout': 30,
    'retry_on_timeout': True,
    'max_connections': int(os.getenv('REDIS_MAX_CONNECTIONS', '10')),
}

# AWS S3 Configuration
if not DEBUG:  # Use S3 in production only
    print("Debug turned off")
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-2')
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    AWS_DEFAULT_ACL = 'public-read'
    AWS_LOCATION = 'media'
    
    # S3 Media settings
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'my-secret-key')
FERNET_KEY = os.getenv('FERNET_KEY')

# Expo Push Notification Settings
EXPO_ACCESS_TOKEN = os.getenv('EXPO_ACCESS_TOKEN', None)